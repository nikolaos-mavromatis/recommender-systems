{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Recommender Systems series","text":"<p>A collection of notebooks and scripts using various recommender system techniques:</p> <ol> <li>Rule-based Recommendations</li> </ol>"},{"location":"notebooks/rule_based_recommender/","title":"Rule-based Recommender","text":"<pre><code>from collections import Counter\nfrom typing import Union\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nfrom recommender_systems.config import DATA_RAW\n</code></pre> <pre><code>data = pd.read_csv(DATA_RAW / \"data.csv\", encoding=\"ISO-8859-1\")\n</code></pre> <pre><code>data.head()\n</code></pre> InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice CustomerID Country 0 536365 85123A WHITE HANGING HEART T-LIGHT HOLDER 6 12/1/2010 8:26 2.55 17850.0 United Kingdom 1 536365 71053 WHITE METAL LANTERN 6 12/1/2010 8:26 3.39 17850.0 United Kingdom 2 536365 84406B CREAM CUPID HEARTS COAT HANGER 8 12/1/2010 8:26 2.75 17850.0 United Kingdom 3 536365 84029G KNITTED UNION FLAG HOT WATER BOTTLE 6 12/1/2010 8:26 3.39 17850.0 United Kingdom 4 536365 84029E RED WOOLLY HOTTIE WHITE HEART. 6 12/1/2010 8:26 3.39 17850.0 United Kingdom <pre><code>data.info()\n</code></pre> <pre>\n<code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 541909 entries, 0 to 541908\nData columns (total 8 columns):\n #   Column       Non-Null Count   Dtype  \n---  ------       --------------   -----  \n 0   InvoiceNo    541909 non-null  object \n 1   StockCode    541909 non-null  object \n 2   Description  540455 non-null  object \n 3   Quantity     541909 non-null  int64  \n 4   InvoiceDate  541909 non-null  object \n 5   UnitPrice    541909 non-null  float64\n 6   CustomerID   406829 non-null  float64\n 7   Country      541909 non-null  object \ndtypes: float64(2), int64(1), object(5)\nmemory usage: 33.1+ MB\n</code>\n</pre> <pre><code>data.describe()\n</code></pre> Quantity UnitPrice CustomerID count 541909.000000 541909.000000 406829.000000 mean 9.552250 4.611114 15287.690570 std 218.081158 96.759853 1713.600303 min -80995.000000 -11062.060000 12346.000000 25% 1.000000 1.250000 13953.000000 50% 3.000000 2.080000 15152.000000 75% 10.000000 4.130000 16791.000000 max 80995.000000 38970.000000 18287.000000 <pre><code>data.isna().sum()\n</code></pre> <pre>\n<code>InvoiceNo           0\nStockCode           0\nDescription      1454\nQuantity            0\nInvoiceDate         0\nUnitPrice           0\nCustomerID     135080\nCountry             0\ndtype: int64</code>\n</pre> <p>Notes:</p> <ul> <li>The <code>Quantity</code> column has negative values. There might be a business reason behind this - for example, back orders, returns, etc. - or it can just be input errors. Since the information on the dataset is limited, I will discard those values.</li> <li>The <code>Description</code> column has null values which will be discarded. </li> <li><code>InvoiceDate</code> column needs to be converted to a datetime object. </li> <li>Convert <code>CustomerID</code> to integer.</li> </ul> <pre><code>data_clean = (\n    data[data[\"Quantity\"] &amp;gt; 0]\n    .dropna(subset=[\"Description\", \"CustomerID\"])\n    .assign(\n        InvoiceDate=lambda x: pd.to_datetime(x[\"InvoiceDate\"], format=\"%m/%d/%Y %H:%M\"),\n        InvoiceMonth=lambda x: x[\"InvoiceDate\"].dt.month,\n        CustomerID=lambda x: x[\"CustomerID\"].astype(int),\n    )\n)\n</code></pre> <pre><code>data_clean.head()\n</code></pre> InvoiceNo StockCode Description Quantity InvoiceDate UnitPrice CustomerID Country InvoiceMonth 0 536365 85123A WHITE HANGING HEART T-LIGHT HOLDER 6 2010-12-01 08:26:00 2.55 17850 United Kingdom 12 1 536365 71053 WHITE METAL LANTERN 6 2010-12-01 08:26:00 3.39 17850 United Kingdom 12 2 536365 84406B CREAM CUPID HEARTS COAT HANGER 8 2010-12-01 08:26:00 2.75 17850 United Kingdom 12 3 536365 84029G KNITTED UNION FLAG HOT WATER BOTTLE 6 2010-12-01 08:26:00 3.39 17850 United Kingdom 12 4 536365 84029E RED WOOLLY HOTTIE WHITE HEART. 6 2010-12-01 08:26:00 3.39 17850 United Kingdom 12 <pre><code>def get_top_selling_items(data: pd.DataFrame, by: list[str] | None = None, top_n: int = 10) -&amp;gt; pd.DataFrame:\n    \"\"\"\n    Returns the top selling items in the data.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        The data to analyze.\n    by : list[str] | None, optional\n        Additional columns to slice upon, by default None\n    top_n : int, optional\n        The number of items to return, by default 10\n\n    Returns\n    -------\n    pd.DataFrame\n        The top selling items.\n    \"\"\"\n    grain = [\"StockCode\", \"Description\"]\n    if by:\n        grain += by\n\n    temp = data.groupby(grain).agg({\"Quantity\": \"sum\"}).sort_values([\"Quantity\"], ascending=False)\n\n    if by:\n        return temp.groupby(level=by).head(top_n).reset_index(drop=False)\n\n    return temp.head(top_n)\n</code></pre> <pre><code>Filter = dict[str, Union[str, int, float]]\n\n\ndef plot_top_selling_by_filter(data, filters: Filter | None = None, top_n: int = 10) -&amp;gt; None:\n    plot_data = data.copy()\n    if filters:\n        q = \" and \".join([f\"{k} == '{v}'\" if isinstance(v, str) else f\"{k} == {v}\" for k, v in filters.items()])\n        plot_data = data.query(q)\n\n    _ = sns.barplot(\n        x=\"Quantity\",\n        y=\"Description\",\n        data=plot_data,\n        hue=\"Description\",\n        legend=False,\n        palette=\"viridis\",\n    )\n    _ = plt.suptitle(f\"Top {top_n} selling items\")\n    if filters:\n        _ = plt.title(\n            f\"Filtered by {', '.join([f'{k}: {v}' for k, v in filters.items()])}\",\n            fontsize=10,\n        )\n    _ = plt.xlabel(\"Quantity\", fontdict={\"fontweight\": \"bold\"})\n    _ = plt.ylabel(\"\")\n    plt.show()\n</code></pre> <pre><code># Top 10 stock codes in terms of quantity sold\nglobal_data = get_top_selling_items(data_clean)\n</code></pre> <pre><code>plot_top_selling_by_filter(global_data)\n</code></pre> <pre><code># Top 10 stock codes by country in terms of quantity sold\ncountry_data = get_top_selling_items(data_clean, by=[\"Country\"])\n</code></pre> <pre><code>plot_top_selling_by_filter(country_data, {\"Country\": \"United Kingdom\"})\n</code></pre> <pre><code># Top 10 stock codes by country and month in terms of quantity sold\ncountry_month_data = get_top_selling_items(data_clean, by=[\"Country\", \"InvoiceMonth\"])\n</code></pre> <pre><code>plot_top_selling_by_filter(country_month_data, {\"Country\": \"United Kingdom\", \"InvoiceMonth\": 12})\n</code></pre> <pre><code>def get_buy_again_list_by_customer_id(data: pd.DataFrame, customer_id: int, top_n: int = 10) -&amp;gt; list[str]:\n    \"\"\"\n    Returns the top selling items for a given customer.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        The data to query.\n    customer_id : int\n        The customer ID to filter upon.\n    top_n : int, optional\n        The number of items to return, by default 10\n\n    Returns\n    -------\n    pd.DataFrame\n        A list of the last items bought by the given customer.\n    \"\"\"\n    customer_data = data.query(f\"CustomerID == {customer_id}\")\n    return list(Counter(customer_data[\"Description\"]))[:top_n]\n</code></pre> <pre><code># last 10 items bought by customer 17849 ordered by quantity in descending order\nget_buy_again_list_by_customer_id(data_clean, 17849)\n</code></pre> <pre>\n<code>['DOORMAT FAIRY CAKE',\n 'DOORMAT HEARTS',\n 'TEA TIME TEAPOT IN GIFT BOX',\n 'HOME BUILDING BLOCK WORD',\n 'REX CASH+CARRY JUMBO SHOPPER',\n 'KENSINGTON COFFEE SET',\n 'NATURAL SLATE RECTANGLE CHALKBOARD',\n 'MEDINA STAMPED METAL STOOL',\n 'TOAST ITS - I LOVE YOU ',\n 'LOVE BUILDING BLOCK WORD']</code>\n</pre> <pre><code>\n</code></pre>"},{"location":"notebooks/rule_based_recommender/#rule-based-recommender","title":"Rule-based Recommender","text":"<p>This is the most straightforward recommender system. Usually, it is based on rules defined by the business. </p> <p>In this case, I will be looking at the following rules:</p> <ul> <li>Most popular items overall in terms of quantity sold,</li> <li>Most popular items by country in terms of quantity sold, and</li> <li>Buy again items for a specific user.</li> </ul> <p>Items are considered to be the unique stock codes.</p>"},{"location":"notebooks/rule_based_recommender/#setup","title":"Setup","text":""},{"location":"notebooks/rule_based_recommender/#data-cleaning","title":"Data cleaning","text":""},{"location":"notebooks/rule_based_recommender/#investigate-data","title":"Investigate data","text":""},{"location":"notebooks/rule_based_recommender/#clean-data","title":"Clean data","text":""},{"location":"notebooks/rule_based_recommender/#retrieve-popular-items-list","title":"Retrieve popular items list","text":""},{"location":"notebooks/rule_based_recommender/#globally","title":"globally","text":""},{"location":"notebooks/rule_based_recommender/#by-country","title":"by country","text":""},{"location":"notebooks/rule_based_recommender/#by-country-and-month-sold","title":"by country and month sold","text":""},{"location":"notebooks/rule_based_recommender/#buy-again-items","title":"Buy again items","text":""}]}